#!/bin/bash

set -eu

# Usually you don't need to change these vars
IMAGE=gitlab/gitlab-runner:alpine
DOCKER_CONFIG_FILE="$HOME/.docker/config.json"
STOP_TIMEOUT=900

# NOTE gitlab-runner sometimes may leave dangling volumes
#https://gitlab.com/gitlab-org/gitlab-runner/-/issues/1611 - related?
# Consider running "docker volume prune" periodically

DEFAULT_RUNNER_NAME=local-1
RUNNER_NAME=${RUNNER_NAME:-$DEFAULT_RUNNER_NAME}
DEFAULT_CONFIG_PARENT="$HOME/.local/etc/gitlab-runner"
RUNNER_CONFIG_DIR=${RUNNER_CONFIG_DIR:-$DEFAULT_CONFIG_PARENT/$RUNNER_NAME/}
# NOTE dind with shared cache may be unstable.
USE_DIND_CACHE=${USE_DIND_CACHE:-0}
export DOCKER_HOST=${DOCKER_HOST:-unix://$XDG_RUNTIME_DIR/docker.sock}

# -------------------- utils --------------------


function show_help() {
    echo "Usage: gitlab-runner CMD [OPTIONS]"
    printf "  %s\n" \
        "This is a wrapper script for gitlab-runner." \
        "Quick start:" \
        "  $ export USE_DIND_CACHE=1  # experimental, use to speed up building and running containers" \
        "  $ gitlab-runner register \$TOKEN" \
        "  $ gitlab-runner run" \
        ""
    echo "Environment variables:"
    printf "    %-28s %s\n" \
        "RUNNER_NAME" "The name of the runner (default \"$DEFAULT_RUNNER_NAME\")." \
        "RUNNER_CONFIG_DIR" "The directory which will be used to store runner config." \
        "" "Default \"$DEFAULT_CONFIG_PARENT/\$RUNNER_NAME/\"" \
        "USE_DIND_CACHE" "Use a docker volume to store DinD cache (default 0)." \
        "" "NOTE if DinD cache is enabled, the runner will execute at most one job concurrently." \
        "" "     If different DinD versions are used by the same runner, builds may (or may not) fail." \
        "" "     Also, if DinD is used for running containers, they will not be removed automatically." \
        "" "     You can run \"dind-prune\" (see below) to reduce cache size." \
        "DOCKER_HOST" "Address of the docker daemon. Usually it is already configured." \
        ""
    echo "Available commands:"
    printf "    %-28s %s\n" \
        "register [TOKEN] [OPTIONS]" "Register the runner. To show available options, run with \"--help\"" \
        "unregister" "Unregister the runner." \
        "" "" \
        "run" "Create and start the runner. Also create DinD cache, if needed." \
        "start" "Start the runner." \
        "stop [TIMEOUT]" "Stop the runner.  Default timeout is ${STOP_TIMEOUT}s" \
        "restart [TIMEOUT]" "Restart the runner. Default timeout is ${STOP_TIMEOUT}s" \
        "rm" "Delete the runner and DinD cache (if used)." \
        "logs" "Show runner logs" \
        "" "" \
        "dind-prune [OPTIONS]" "Run a DinD instance and exec \"docker system prune\" inside." \
        "" "You can pass additional OPTIONS for the command." \
        "" "While this command is executed, the runner will be paused." \
        "dind-shell" "Run a shell to manually manage DinD. The runner will be temporarily stopped." \
        "protect-volumes" "Add a docker prune filter to protect persistent runner volumes." \
        "" "You don't need to run this command, unless you were prompted to do so by \"gitlab-runner run\"." \
        "-- DOCKER_COMMAND [OPTIONS]" "Run a docker command."
}


function add_prune_filter () {
    local filter_str="\"label!=$PERSISTENT_LABEL\""
    function create_config () {
        printf "%s\n" \
        "{" \
        "    \"pruneFilters\": [$filter_str]" \
        "}" > "$1"
    }

    # create config if it doesn't exist (in this case we don't need jq)
    if [ ! -f "$DOCKER_CONFIG_FILE" ]; then
        create_config "$DOCKER_CONFIG_FILE"
        [ ${QUIET:+x} ] || echo "OK: Added prune filter"
        return
    fi
    # check if the filter already exists
    grep -q "$filter_str" "$DOCKER_CONFIG_FILE" && { [ ${QUIET:+x} ] || echo "OK: The filter already exists"; return; }

    local new_config_file="$DOCKER_CONFIG_FILE.new"
    if ! command -v jq &> /dev/null; then
        create_config "$new_config_file"
        >&2 printf "%s\n" \
        "WARNING: jq is not installed, cannot add prune filter for volumes." \
        "         To add the filter, install jq, then run \"$0 protect-volumes\"" \
        "         To add the filter manually, merge \"$new_config_file\" into \"$DOCKER_CONFIG_FILE\""
        return
    fi
    rm -f "$new_config_file"
    # -s and first "if" are needed to process empty files
    local new_config=$(jq -s "if . == [] then {} else .[] end | .pruneFilters |= if .|index($filter_str)|not then . + [$filter_str] else . end" \
                              "$DOCKER_CONFIG_FILE")
    # backup and update config
    cp "$DOCKER_CONFIG_FILE" "$DOCKER_CONFIG_FILE.bak"
    echo "$new_config" > "$DOCKER_CONFIG_FILE"
    [ ${QUIET:+x} ] || echo "OK: Added prune filter"
}


# -------------------- entrypoint --------------------


if [ -z ${1+$1} ]; then
    show_help
    exit 1
fi


# -------------------- runner commands --------------------


CONTAINER_NAME="gitlab-runner-$RUNNER_NAME"

DIND_CACHE_VOLUME="$RUNNER_NAME-dind-cache"
PERSISTENT_LABEL=runner-persistent-volume

CONFIG_DIR="$RUNNER_CONFIG_DIR"
CERTDIR="/certs/"
CLIENT_CERTDIR="$CERTDIR/client/"

CONFIG_MOUNT="$CONFIG_DIR:/etc/gitlab-runner"
SOCKET_MOUNT="${DOCKER_HOST#unix://}:/var/run/docker.sock"
# actually mounted into all service and job containers.
# Any issues with concurrent job execution?
DIND_CACHE_MOUNT="$DIND_CACHE_VOLUME:/var/lib/docker/"

case "$1" in
    --help|-h)
        show_help
        exit 0
        ;;
    protect-volumes)
        add_prune_filter
        ;;
    dind-prune|dind-shell)
        if [ "$USE_DIND_CACHE" = 0 ]; then
            echo "DinD cache is not used"
            exit
        fi
        echo "Stopping the runner..."
        "$0" stop
        # NOTE what if jobs used a different version of dind? will this work?
        echo "Starting DinD..."
        dind_container="dind-tmp-$RUNNER_NAME"
        docker run --rm -d -v "$DIND_CACHE_MOUNT" --name "$dind_container" --privileged docker:dind > /dev/null
        [ -t 0 ] && [ -t 1 ] && it_arg=-it || it_arg=  # to use dind commands from scripts
        if [ "$1" = "dind-prune" ]; then
            shift
            args="$@"  # Additional args for prune, e.g. --force or --filter
            docker exec $it_arg "$dind_container" sh -c "while ( ! docker ps -q 2>/dev/null ); do sleep 1; done; docker system prune $args"
        else
            docker exec $it_arg "$dind_container" sh -c "while ( ! docker ps -q 2>/dev/null ); do sleep 1; done; sh"
        fi
        docker stop "$dind_container" > /dev/null
        echo "Starting the runner..."
        "$0" start
        ;;
    register)
        shift
        if [ -z ${1+$1} ]; then
            read -p "Enter the registration token: " token
        else
            token="$1"
            shift
        fi
        runner_cfg=(
            --non-interactive
            --url "https://gitlab.com/"
            --registration-token "$token"
            --name "$RUNNER_NAME"
            --run-untagged=true
            --locked=false
            --env "DOCKER_TLS_CERTDIR=$CERTDIR"
            --env "DOCKER_CERT_PATH=$CLIENT_CERTDIR"
            --env "DOCKER_HOST=tcp://docker:2376"
            --env "DOCKER_TLS_VERIFY=1"
            --executor docker
            --docker-privileged=true
            --docker-image ruby:2.5
            --docker-volumes "$CERTDIR"
        )
        limit=0
        if [ "$USE_DIND_CACHE" != 0 ]; then
            limit=1
            # NOTE It's possible to use an anonymous volume for the cache
            #      but it may get accidentally pruned or deleted by the runner
            # NOTE If custom tag list is supplied, "shared-dind" tag will not be included. TODO merge tag lists?
            runner_cfg+=(
                --docker-volumes "$DIND_CACHE_MOUNT"
                --tag-list "shared-dind"
            )
        fi
        runner_cfg+=(
            --limit $limit
            "$@"
        )
        if [[ "$token" =~ ^--help|-h$ ]]; then
            runner_cfg=("--help")
        fi

        docker run --rm -it -v "$CONFIG_MOUNT" $IMAGE register \
        "${runner_cfg[@]}"
        ;;
    unregister)
        docker run --rm -it -v "$CONFIG_MOUNT" $IMAGE unregister \
            --url "https://gitlab.com/" \
            --name "$RUNNER_NAME"
        ;;
    start)
        docker $1 "$CONTAINER_NAME"
        ;;
    stop | restart)
        # if runner is killed (on timeout), it will leave dangling containers and volumes
        timeout=${2:-$STOP_TIMEOUT}
        docker $1 -t "$timeout" "$CONTAINER_NAME"
        ;;
    logs)
        docker logs -f "$CONTAINER_NAME"
        ;;
    run)
        # TODO run registry mirror? (only dockerhub?)
        if [ "$USE_DIND_CACHE" != 0 ]; then
            QUIET=1 add_prune_filter
            docker volume create --label "$PERSISTENT_LABEL" "$DIND_CACHE_VOLUME" > /dev/null
        fi
        docker run -d --name "$CONTAINER_NAME" --restart always \
            -v "$CONFIG_MOUNT" -v "$SOCKET_MOUNT" \
            $IMAGE
        ;;
    rm)
        docker rm "$CONTAINER_NAME"
        if [ "$USE_DIND_CACHE" != 0 ]; then
            docker volume rm "$DIND_CACHE_VOLUME" > /dev/null
        fi
        ;;
    --)
        shift
        docker "$@"
        # add exec?
        ;;
    *)
        echo "Unknown command"
        ;;
esac
